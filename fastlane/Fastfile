# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

podspecPath = "TestGithubCI.podspec"

platform :ios do
  # before_all do
  #   begin
  #     xcversion(version: "~> 13.2")
  #   rescue => ex
  #     UI.error("Failed when switching to Xcode version: #{ex}")
  #   end
  # end

  desc "Pulls dependencies"
  lane :build_dependencies do
    cocoapods
  end

  desc "Generate Apple doc"
  lane :gen_apple_doc do
    #generate doc
    # appledoc(
    #   project_name: "TestGithubCI",
    #   project_company: "LinkedIn, Inc",
    #   input: [
    #     "TestXCFramework"
    #   ],
    #   options: "--keep-intermediate-files --search-undocumented-doc",
    #   warnings: "--warn-missing-output-path --warn-missing-company-id"
    # )
    system "rm -r ../derived_data/*"
    jazzy(
      config: '.jazzy.yaml'
    )
    # commit and push to the doc branch
    git_commit(
      path: './docs',
      message: "Updated docs"
    )
    push_to_git_remote(
      remote: 'origin',
      remote_branch: 'gh-pages',
      force: true
    )
  end

  lane :lints do
    sh "pwd"
    subdirs = ["Core","MLFoundations", "TestXCFramework", "TestXCFrameworkTests"]
    files = []
    Dir.chdir("..") do
      files = subdirs.map { |dir| Dir.glob("#{dir}/**/*.swift")}.flatten(1)
    end
    swiftlint(
      mode: :lint,
      files: files,
      executable: "Pods/SwiftLint/swiftlint",
      config_file: ".swiftlint.yml"
    )
  end

  lane :tests do
    scan(
      scheme: "TestGithubCI",
      derived_data_path: "derived_data"
    )
    system "rm -r ../xcov_output/*"
    xcov(
      workspace: "TestGithubCI.xcworkspace",
      scheme: "TestGithubCI",
      output_directory: "xcov_output",
      skip_slack: true,
      derived_data_path: "derived_data"
    )
#    pod_lib_lint
  end

  lane :someA do |options|
    puts "Hello world!"
  end

  desc "Create a release based on change log"
  lane :create_release do |options|
    new_release_version = options[:version]
    changelog_filename = "CHANGELOG.md"

    # Prepare the binaries and release note
    zipped_frameworks = xcframework(version: new_release_version, schemes: ["Core", "TestXCFramework", "MLFoundations"])
    release_content = read_changelog(
      section_identifier: '[Unreleased]',	# Specify what section to read
      excluded_markdown_elements: ['-', '###']
    )
    # stamp the new version into change log and check-in
    stamp_changelog(
      section_identifier: new_release_version,
      git_tag: new_release_version,
      should_stamp_date: true,
      stamp_datetime_format: '%FT%TZ'
    )
    version_bump_podspec(path: "TestGithubCI.podspec", version_number: new_release_version)
    git_commit(
      path: [
        "./CHANGELOG.md",
        "./TestGithubCI.podspec"
    ],
      message: "Version bump to #{new_release_version}",
      allow_nothing_to_commit: true
    )
    push_to_git_remote
    add_git_tag(tag: new_release_version)
    push_git_tags

    set_github_release(
      repository_name: "heguanyu/TestGithubCI",
      api_token: ENV["RELEASE_TOKEN"],
      name: new_release_version,
      tag_name: new_release_version,
      upload_assets: zipped_frameworks,
      description: release_content
    )
    pod_push(allow_warnings: true)
  end

  desc "Create binary frameworks with the `xcframework` format under the `build/` folder."
  lane :xcframework do |options|
    new_release_version = options[:version]
    output_path = "build"
    schemes = options[:schemes]

    FileUtils.rm_rf "../#{output_path}"
    framework_paths = schemes.map { |scheme|
      build_xcframework(version: new_release_version, scheme: scheme, output: output_path)
    }.join(" ")

    zipfilePath = "TestGithubCI-#{new_release_version}.zip"
    Action.sh("cd ../#{output_path} && zip -r #{zipfilePath} #{framework_paths} && cd ../fastlane")
    "./#{output_path}/" + zipfilePath
  end
end


