# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

podspecPath = "TestGithubCI.podspec"

platform :ios do
  # before_all do
  #   begin
  #     xcversion(version: "~> 13.2")
  #   rescue => ex
  #     UI.error("Failed when switching to Xcode version: #{ex}")
  #   end
  # end

  desc "Pulls dependencies"
  lane :build_dependencies do
    cocoapods
  end


  desc "Generate tag history from git"
  lane :prepareOtherDocs do |options|
    new_release_version = options[:version]
    Dir.chdir("../webui") do
      stringtags = sh('git for-each-ref --shell --format="{\'version\':%(refname:short),\'date\':%(creatordate:format:%s)}" "refs/tags/*"').gsub("'", '"')
      # Hack to assume there is a new tag to be created
      # tags = '{"version":"'+new_release_version+'","date":"'+Time.now.to_i.to_s+'"},' + "\n" + stringtags.split("\n").join(",\n")
      tags = stringtags.split("\n").join(",\n")
      File.write("public/data/tags.json", "{\"tags\":[\n#{tags}\n]}")
    end
    Dir.chdir("..") do
      sh("cp README.md webui/public/data")
      sh("cp CHANGELOG.md webui/public/data")
      sh("cp DragNDropGuide.md webui/public/data/GETSTARTED.md")
      sh("cp -r jazzydocs webui/public/data/")
      sh("rm -rf webui/public/doc_archives/#{new_release_version}")
      sh("mkdir -p webui/public/doc_archives/#{new_release_version}")
      sh("cp -r jazzydocs/* webui/public/doc_archives/#{new_release_version}/")
    end
    Dir.chdir("../webui") do
      sh("sed -i '' '3i\\'$'\n''  \"homepage\": \"https://heguanyu.github.io/TestGithubCIPubicRepo\",\n' package.json")
      sh("npm install --force")
      sh("CI=false npm run build")
    end
    Dir.chdir("..") do
      sh("rm -rf docs")
      sh("mkdir docs")
      sh("cp -r webui/build/* docs/")
    end
  end

  desc "Playground"
  lane :pg do

  end

  desc "Generate Apple doc and push to the public repo"
  lane :gen_web_ui_to_docs do |options|
    Dir.chdir("..") do
      sh("jazzy -x -workspace,TestGithubCI.xcworkspace,-scheme,TestXCFramework,-sdk,iphoneos")
    end
    prepareOtherDocs(options)
  end

  desc "Generate Apple doc"
  lane :gen_apple_doc do
    modules = ["TestXCFramework", "Core", "MLFoundations"]
    source_kitten_source_files = modules.map{|moduleName| moduleName + ".json"}.join(",")
    puts Dir.pwd
    Dir.chdir("..") do
      begin
        modules.each do |moduleName|
          sh("sourcekitten doc --module-name #{moduleName} -- -sdk iphoneos  > #{moduleName}.json")
        end
        sh("pwd && jazzy --theme apple --sourcekitten-sourcefile #{source_kitten_source_files}")
      rescue
        puts "Some errors is happening when generating a doc, exiting"
      ensure
        modules.each do |moduleName|
          sh("rm #{moduleName}.json")
        end
      end
    end

    # commit and push to the doc branch
    git_commit(
      path: './docs',
      message: "Updated docs"
    )
    push_to_git_remote(
      remote: 'origin',
      remote_branch: 'gh-pages',
      force: true
    )
  end

  lane :lints do
    sh "pwd"
    subdirs = ["Core","MLFoundations", "TestXCFramework", "TestXCFrameworkTests"]
    files = []
    Dir.chdir("..") do
      files = subdirs.map { |dir| Dir.glob("#{dir}/**/*.swift")}.flatten(1)
    end
    swiftlint(
      mode: :lint,
      files: files,
      executable: "Pods/SwiftLint/swiftlint",
      config_file: ".swiftlint.yml"
    )
  end

  lane :tests do
    scan(
      scheme: "TestGithubCI",
      derived_data_path: "derived_data",
      reset_simulator: true,
      devices: ['iPhone 13']
    )
    system "rm -r ../xcov_output/*"
    xcov(
      workspace: "TestGithubCI.xcworkspace",
      scheme: "TestGithubCI",
      output_directory: "xcov_output",
      skip_slack: true,
      derived_data_path: "derived_data"
    )
#    pod_lib_lint
  end

  desc "Just build"
  lane :b do
    buildDeliverableZip(version: "0.0.1-alpha", schemes: ["TestXCFramework"])
  end

  desc "Create a release based on change log"
  lane :create_release do |options|
    new_release_version = options[:version]
    changelog_filename = "CHANGELOG.md"
    dry_run = options[:dry]
    dry = false
    if dry_run == "1"
      new_release_version = "0.0.1-SNAPSHOT"
      dry = true
    end

    # Prepare the binaries and release note
    set_info_plist_value(path: "./TestGithubCI/Info.plist", key: "SDKVersionNumber", value: new_release_version)
    attched_framework = buildDeliverableZip(version: new_release_version, schemes: ["TestXCFramework"])
    release_content = read_changelog(
      section_identifier: '[Unreleased]',	# Specify what section to read
      excluded_markdown_elements: ['-', '###']
    )
    # stamp the new version into change log and check-in
    stamp_changelog(
      section_identifier: new_release_version,
      git_tag: new_release_version,
      should_stamp_date: true,
      stamp_datetime_format: '%FT%TZ'
    )
    if dry
      return
    end

    version_bump_podspec(path: "TestGithubCI.podspec", version_number: new_release_version)
    git_commit(
      path: [
        "./CHANGELOG.md",
        "./TestGithubCI.podspec",
        "./TestGithubCI/Info.plist"
    ],
      message: "Version bump to #{new_release_version}",
      allow_nothing_to_commit: true
    )
    push_to_git_remote
    
    begin
      sh("git push --delete origin #{new_release_version}")
    rescue => ex
      puts "No existing tag, safe"
    ensure
      add_git_tag(tag: new_release_version)
      push_git_tags
    end

    set_github_release(
      repository_name: "heguanyu/TestGithubCI",
      api_token: ENV["RELEASE_TOKEN"],
      name: new_release_version,
      tag_name: new_release_version,
      upload_assets: attched_framework,
      description: release_content
    )
  end

  desc "Push to cocoapod. Configured via TestGithubCI.podspec"
  lane :publishToCocoapod do
    pod_push(allow_warnings: true)
  end

  desc "Create binary frameworks with the `xcframework` format under the `build/` folder."
  lane :buildDeliverableZip do |options|
    new_release_version = options[:version]
    output_path = "build"
    package_name = "TestXCFramework"
    schemes = options[:schemes]

    FileUtils.rm_rf "../#{output_path}"

    file_paths = schemes.map { |scheme|
      build_xcframework(version: new_release_version, scheme: scheme, output: output_path, workspace: "TestGithubCI")
    }

    zipfilePath = "#{package_name}-#{new_release_version}.zip"

    Dir.chdir("../#{output_path}") do
      sh("cp ../LICENSE .")
      file_paths.push("LICENSE")
      sh("zip -r #{zipfilePath} #{file_paths.join(" ")}")
      sh("rm LICENSE")
    end
    output = "./#{output_path}/#{zipfilePath}"

    output
  end
end